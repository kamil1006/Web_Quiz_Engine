type: edu
custom_name: stage5
files:
- name: build.gradle
  visible: true
  text: |
    plugins {
        id 'org.springframework.boot' version '2.2.2.RELEASE'
        id 'java'
    }

    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        compile("org.springframework.boot:spring-boot-starter-web")
    }
  learner_created: false
- name: src/engine/WebQuizEngine.java
  visible: true
  text: |
    package engine;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class WebQuizEngine {

        public static void main(String[] args) {
            SpringApplication.run(WebQuizEngine.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |
    server.port=8889
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/tests/WebQuizEngineTest.java
  visible: false
  text: |
    package tests;

    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import engine.WebQuizEngine;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.any;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isArray;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isString;

    public class WebQuizEngineTest extends SpringTest {
        public WebQuizEngineTest() {
            super(WebQuizEngine.class, "../quizdb.mv.db");
        }

        static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        private static String quiz1 =
            "{\n" +
                "  \"title\": \"The Java Logo\", \n" +
                "  \"text\": \"What is depicted on the Java logo?\",\n" +
                "  \"options\": [\"Robot\",\"Tea leaf\",\"Cup of coffee\",\"Bug\"],\n" +
                "  \"answer\": [2]\n" +
                "}";

        private static String quiz2 =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"],\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String quiz3 =
            "{\n" +
                "  \"title\": \"Math1\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+3\",\"2+2\",\"8-1\",\"1+5\"],\n" +
                "  \"answer\": [0,1]\n" +
                "}";

        private static String quiz4 =
            "{\n" +
                "  \"title\": \"Math2\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"1+1\",\"2+2\",\"8-1\",\"5-1\"],\n" +
                "  \"answer\": [1,3]\n" +
                "}";

        private static String quiz5 =
            "{\n" +
                "  \"title\": \"Math3\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"],\n" +
                "  \"answer\": []\n" +
                "}";

        private static String quiz6 =
            "{\n" +
                "  \"title\": \"Math4\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2*3\",\"5*8\",\"8*0\",\"1*5\"]\n" +
                "}";

        private static String quiz7 =
            "{\n" +
                "  \"title\": \"Math5\",\n" +
                "  \"text\": \"Which of the following is equal to 4?\",\n" +
                "  \"options\": [\"2^2\",\"2+2\",\"2-2\",\"2*2\"],\n" +
                "  \"answer\": [0,1,3]\n" +
                "}";

        private static String[] quizzes = new String[] {
            quiz1, quiz2, quiz3, quiz4, quiz5, quiz6, quiz7
        };

        private static int[] quizIds = new int[] {
            0, 0, 0, 0, 0, 0, 0
        };

        private static String error400noTitle =
            "{\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyTitle =
            "{\n" +
                "  \"title\": \"\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noText =
            "{\n" +
                "  \"title\": \"123123123\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyText =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"\",\n" +
                "  \"options\": [\"Everything goes right\",\"42\",\"2+2=4\",\"11011100\"]\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400noOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"123123123\",\n" +
                "  \"answer\": [1]\n" +
                "}";

        private static String error400emptyOptions =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [ ]\n" +
                "  \"answer\": [ ]\n" +
                "}";

        private static String error400oneOption =
            "{\n" +
                "  \"title\": \"The Ultimate Question\",\n" +
                "  \"text\": \"What is the answer to the Ultimate Question of Life, the Universe and Everything?\",\n" +
                "  \"options\": [\"Everything goes right\"]\n" +
                "  \"answer\": [0]\n" +
                "}";


        private static String login1 = "test@google.com";
        private static String pass1 = "qwerty";

        private static String login2 = "user@google.com";
        private static String pass2 = "12345";

        private static HttpRequest auth(HttpRequest req, int user) {
            String login;
            String pass;
            if (user == 1) {
                login = login1;
                pass = pass1;
            } else if (user == 2) {
                login = login2;
                pass = pass2;
            } else {
                login = fakeLogin;
                pass = fakePass;
            }
            return req.basicAuth(login, pass);
        }

        private static String fakeLogin = "qwerty@google.com";
        private static String fakePass = "456534";

        private static String noAtInLogin_login = "google.com";
        private static String noAtInLogin_pass = "asddfggh";

        private static String noDotInLogin_login = "well@googlecom";
        private static String noDotInLogin_pass = "rtyfgcxsfd";

        private static String loginExist_login = "test@google.com";
        private static String loginExist_pass = "rtyfgcxsfd1";

        private static String shortPassword_login = "someuser@gmail.com";
        private static String shortPassword_pass = "1234";

        private static String shortPassword2_login = "someuser2@gmail.com";
        private static String shortPassword2_pass = "123";

        @DynamicTestingMethod
        DynamicTesting[] dt = new DynamicTesting[] {
            // Test login
            () -> testRegister(login1, pass1, 200),
            () -> testRegister(login2, pass2, 200),
            () -> testRegister(noAtInLogin_login, noAtInLogin_pass, 400),
            () -> testRegister(noDotInLogin_login, noDotInLogin_pass, 400),
            () -> testRegister(loginExist_login, loginExist_pass, 400),
            () -> testRegister(shortPassword_login, shortPassword_pass, 400),
            () -> testRegister(shortPassword2_login, shortPassword2_pass, 400),


            // Add 2 quizzes and check their existence
            () -> testAllQuizzes(0, 1),
            () -> testAllQuizzes(0, 2),

            () -> testCreateQuiz(0, 1),
            () -> testQuizExists(0, 2),
            () -> testQuizNotExists(0, 2, 125),

            () -> testAllQuizzes(1, 1),

            () -> testCreateQuiz(1, 2),
            () -> testQuizExists(1, 2),
            () -> testQuizNotExists(1, 2, 125),

            () -> testAllQuizzes(2, 2),


            // No auth operations tests
            () -> testAllQuizzesNoAuth(),
            () -> testCreateQuizNoAuth(1),
            () -> testCreateQuizNoAuth(2),
            () -> testSolveQuizNoAuth(quizIds[0], "[0]"),
            () -> testSolveQuizNoAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesNoAuth(quizIds[0]),
            () -> testDeleteQuizzesNoAuth(quizIds[1]),


            // Fake auth operations tests
            () -> testAllQuizzesFakeAuth(),
            () -> testCreateQuizFakeAuth(1),
            () -> testCreateQuizFakeAuth(2),
            () -> testSolveQuizFakeAuth(quizIds[0], "[0]"),
            () -> testSolveQuizFakeAuth(quizIds[1], "[1]"),
            () -> testDeleteQuizzesFakeAuth(quizIds[0]),
            () -> testDeleteQuizzesFakeAuth(quizIds[1]),


            // Solve two quizzes
            () -> checkQuizSuccess(quizIds[0], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[0], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),

            () -> checkQuizSuccess(quizIds[1], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 1),
            () -> checkQuizSuccess(quizIds[1], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[3]", false, 1),


            // Test database save
            () -> testAllQuizzes(2, 1),
            () -> testAllQuizzes(2, 2),
            () -> reloadServer(),
            () -> testAllQuizzes(2, 1),
            () -> testAllQuizzes(2, 2),
            () -> checkQuizSuccess(quizIds[0], "[2]", true, 1),
            () -> checkQuizSuccess(quizIds[0], "[3]", false, 2),
            () -> checkQuizSuccess(quizIds[1], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[1], "[1]", true, 2),


            // Test wrongly created quizzes
            () -> addIncorrectQuiz(error400noTitle, 1),
            () -> addIncorrectQuiz(error400emptyTitle, 2),
            () -> addIncorrectQuiz(error400noText, 1),
            () -> addIncorrectQuiz(error400emptyText, 2),
            () -> addIncorrectQuiz(error400noOptions, 1),
            () -> addIncorrectQuiz(error400emptyOptions, 2),
            () -> addIncorrectQuiz(error400oneOption, 1),


            // Test multiple answers
            () -> testCreateQuiz(2, 1),
            () -> testQuizExists(2, 1),
            () -> testQuizNotExists(2, 1, 125),
            () -> checkQuizSuccess(quizIds[2], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1]", true, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[2], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[2], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(3, 1),
            () -> testQuizExists(3, 1),
            () -> testQuizNotExists(3, 1, 125),
            () -> checkQuizSuccess(quizIds[3], "[]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[3], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[3], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[3], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(4, 1),
            () -> testQuizExists(4, 1),
            () -> testQuizNotExists(4, 1, 125),
            () -> checkQuizSuccess(quizIds[4], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[4], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[4], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[4], "[0,1,2,3]", false, 2),

            () -> testCreateQuiz(5, 1),
            () -> testQuizExists(5, 1),
            () -> testQuizNotExists(5, 1, 125),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[1,2,3]", false, 1),
            () -> checkQuizSuccess(quizIds[5], "[0,1,2,3]", false, 1),

            () -> testCreateQuiz(6, 1),
            () -> testQuizExists(6, 1),
            () -> testQuizNotExists(6, 1, 125),
            () -> checkQuizSuccess(quizIds[6], "[]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),
            () -> checkQuizSuccess(quizIds[6], "[1,2,3]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2,3]", false, 2),

            () -> testAllQuizzes(7, 2),
            () -> reloadServer(),
            () -> testAllQuizzes(7, 2),
            () -> checkQuizSuccess(quizIds[5], "[]", true, 1),
            () -> checkQuizSuccess(quizIds[5], "[0]", false, 2),
            () -> checkQuizSuccess(quizIds[6], "[0,1,2]", false, 1),
            () -> checkQuizSuccess(quizIds[6], "[0,1,3]", true, 2),


            // Test delete
            () -> testDelete(quizIds[0], 1, 204),
            () -> testDelete(quizIds[0], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizExists(1, 1),
            () -> testQuizExists(1, 2),

            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 1, 403),
            () -> testDelete(quizIds[1], 2, 204),
            () -> testDelete(quizIds[1], 2, 404),
            () -> testDelete(quizIds[1], 1, 404),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),

            () -> testAllQuizzes(5, 1),
            () -> reloadServer(),
            () -> testAllQuizzes(5, 2),
            () -> testQuizNotExists(0, 1, 0),
            () -> testQuizNotExists(0, 2, 0),
            () -> testQuizNotExists(1, 1, 0),
            () -> testQuizNotExists(1, 2, 0),
        };

        private CheckResult testRegister(String login, String password, int status) {
            JsonObject json = new JsonObject();
            json.addProperty("email", login);
            json.addProperty("password", password);

            String url = "/api/register";
            HttpResponse resp = post(url, getPrettyJson(json)).send();

            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizNoAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = post(url, quizzes[quizNum]).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuizFakeAuth(int quizNum) {
            String url = "/api/quizzes";
            HttpResponse resp = auth(post(url, quizzes[quizNum]), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizNoAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");;
            HttpResponse resp = req.send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testSolveQuizFakeAuth(int quizNum, String answerSent) {
            String url = "/api/quizzes/" + quizNum + "/solve";
            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesNoAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = get(url).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testAllQuizzesFakeAuth() {
            String url = "/api/quizzes";
            HttpResponse resp = auth(get(url), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesNoAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpResponse resp = delete(url).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testDeleteQuizzesFakeAuth(int quizNum) {
            String url = "/api/quizzes/" + quizNum;
            HttpResponse resp = auth(delete(url), 3).send();
            checkStatusCode(resp, 401);
            return CheckResult.correct();
        }

        private CheckResult testCreateQuiz(int quizNum, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quizzes[quizNum]);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("id", isInteger(i -> {
                        quizIds[quizNum] = i;
                        return true;
                    }))
                    .anyOtherValues()
            );

            return CheckResult.correct();
        }

        private CheckResult testQuizExists(int quizNum, int user) {
            int quizId = quizIds[quizNum];
            String quiz = quizzes[quizNum];

            String url = "/api/quizzes/" + quizId;

            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 200);

            JsonObject rightQuiz = getJson(quiz).getAsJsonObject();
            rightQuiz.remove("answer");
            rightQuiz.addProperty("id", quizId);

            expect(getPrettyJson(rightQuiz)).asJson().check(
                isObject()
                    .value("id", quizId)
                    .value("title", isString())
                    .value("text", isString())
                    .value("options", isArray(any()))
            );

            JsonElement json = resp.getJson();

            CheckResult wrongResponse = CheckResult.wrong(
                "The quiz sent to the program looked like this:\n" +
                    getPrettyJson(rightQuiz) + "\n\n" +
                    "But the received quiz looks like that:\n" +
                    getPrettyJson(json)
            );

            if (!json.isJsonObject()) {
                return wrongResponse;
            }

            JsonObject obj = json.getAsJsonObject();

            if (!rightQuiz.equals(obj)) {
                return wrongResponse;
            }

            return CheckResult.correct();
        }

        private CheckResult testQuizNotExists(int quizNum, int user, int shift) {
            int quizId = quizIds[quizNum];

            String url = "/api/quizzes/" + (quizId + shift);
            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 404);

            return CheckResult.correct();
        }

        private CheckResult testAllQuizzes(int count, int user) {
            String url = "/api/quizzes";
            HttpResponse resp = auth(get(url), user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isArray(count, isObject().anyOtherValues())
            );

            return CheckResult.correct();
        }

        private CheckResult checkQuizSuccess(int quizNum, String answerSent, boolean shouldResponse, int user) {
            String url = "/api/quizzes/" + quizNum + "/solve";

            HttpRequest req = post(url, "{" + " \"answer\" : " + answerSent + "}");
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 200);

            expect(resp.getContent()).asJson().check(
                isObject()
                    .value("success", shouldResponse)
                    .value("feedback", isString())
            );

            return CheckResult.correct();
        }

        private CheckResult addIncorrectQuiz(String quiz, int user) {
            String url = "/api/quizzes";
            HttpRequest req = post(url, quiz);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, 400);
            return CheckResult.correct();
        }

        private CheckResult testDelete(int quizNum, int user, int status) {
            String url = "/api/quizzes/" + quizNum;
            HttpRequest req = delete(url);
            HttpResponse resp = auth(req, user).send();
            checkStatusCode(resp, status);
            return CheckResult.correct();
        }

        private CheckResult reloadServer() {
            try {
                reloadSpring();
            } catch (Exception ex) {
                throw new UnexpectedError(ex.getMessage());
            }
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/engine/controller/StageOneControllerTest.java
  visible: true
  learner_created: false
- name: src/engine/controller/StageOneController.java
  visible: true
  text: |
    package engine.controller;

    import engine.entity.Odpowiedz;
    import engine.entity.Quiz;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestParam;

    import java.util.Arrays;
    import java.util.List;

    //@RestController
    public class StageOneController {

        private Quiz quiz;
        private List<String> opcje;
        //private List<Boolean> opcjeOdpowiedzi;
        Odpowiedz odpowiedz;


        public StageOneController() {
            opcje = Arrays.asList("Robot","Tea leaf","Cup of coffee","Bug");
          //  opcjeOdpowiedzi = Arrays.asList(false,false,true,false);
    //        quiz=new Quiz("The Java Logo","What is depicted on the Java logo?",opcje,opcjeOdpowiedzi);
          //  quiz=new Quiz("The Java Logo","What is depicted on the Java logo?",opcje);

        }

        @GetMapping("/api/quiz")
        public Quiz getQuizApi() {
            return quiz;
        }

        @PostMapping("/api/quiz")
        public Odpowiedz checkAnswer(@RequestParam("answer") int answer) {
            //return quiz;
            System.out.println(answer);
            Odpowiedz odpowiedz = new Odpowiedz();
            if(answer==2){
                odpowiedz.setSuccess(true);
                odpowiedz.setFeedback("Congratulations, you're right!");
            }
          else {
                odpowiedz.setSuccess(false);
                odpowiedz.setFeedback("Wrong answer! Please, try again.");

            }

            return odpowiedz;
        }

    }
  learner_created: true
- name: src/engine/entity/Odpowiedz.java
  visible: true
  text: |
    package engine.entity;

    public class Odpowiedz {

        Boolean success;
        String feedback;

        public Odpowiedz() {
        }

        public Odpowiedz(Boolean success, String feedback) {
            this.success = success;
            this.feedback = feedback;
        }

        public Boolean getSuccess() {
            return success;
        }

        public void setSuccess(Boolean success) {
            this.success = success;
        }

        public String getFeedback() {
            return feedback;
        }

        public void setFeedback(String feedback) {
            this.feedback = feedback;
        }
    }
  learner_created: true
- name: src/engine/controller/StageFourController.java
  visible: true
  text: |
    package engine.controller;

    import com.fasterxml.jackson.databind.JsonNode;
    import com.fasterxml.jackson.databind.node.ArrayNode;
    import com.google.gson.Gson;
    import engine.entity.Odpowiedz;
    import engine.entity.Quiz;
    import engine.repository.QuizRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpHeaders;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.ui.Model;
    import org.springframework.web.bind.annotation.*;

    import java.util.ArrayList;
    import java.util.List;

    @RestController
    public class StageFourController {
        //-----------------------------------------------------------------------
        private Quiz quiz;
        private List<String> opcje;
        //private List<Boolean> opcjeOdpowiedzi;
        Quiz odpowiedz;
        List<Quiz> qwizy;
        int licznik;
        //-----------------------------------------------------------------------
        @Autowired
        QuizRepository quizRepository;

        //-----------------------------------------------------------------------

        public StageFourController() {
            qwizy=new ArrayList<>();
        }


        //-----------------------------------------------------------------------
        @PostMapping(path="/api/quizzes",  consumes = "application/json" )
        public ResponseEntity<String> insertKwiz(@RequestBody com.fasterxml.jackson.databind.JsonNode inf, Model model) {

            String title = inf.get("title").asText();
            String text = inf.get("text").asText();
            JsonNode options = null;
            options = inf.get("options");

            List<String> opcje= new ArrayList<>();
            if(options!=null) {
                if (options.isArray()) {
                    ArrayNode arrayNode = (ArrayNode) options;
                    for (int i = 0; i < arrayNode.size(); i++) {
                        opcje.add(arrayNode.get(i).asText());
                    }
                }
            }else {
                return new ResponseEntity(HttpStatus.BAD_REQUEST);
            }

            //int answer = Integer.parseInt(inf.get("answer").asText());

            List<Integer> odpowiedzi= new ArrayList<>();
            JsonNode answers=null;
            answers = inf.get("answer");
            if(answers!=null) {
                if (answers.isArray()) {
                    ArrayNode arrayNode = (ArrayNode) answers;
                    for (int i = 0; i < arrayNode.size(); i++) {
                        odpowiedzi.add(arrayNode.get(i).intValue());
                    }
                }
            }



            boolean czyOk=false;
            if(title.length()>0 && text.length()>0&& opcje.size()>1) czyOk=true;

            if(czyOk) {
                licznik++;
    //            quiz = new Quiz(licznik, title, text, opcje, answer);
                //quiz = new Quiz(licznik, title, text, opcje, odpowiedzi);
                quiz = new Quiz( title, text, opcje, odpowiedzi);


                System.out.println("wprowadzono " + quiz);
                qwizy.add(quiz);
                quizRepository.save(quiz);

                // return null;
                HttpHeaders responseHeaders = new HttpHeaders();
                responseHeaders.set("Content-Type", "application/json");

                Gson gson = new Gson();
                //gson.


    //            Quiz kwis = qwizy.get(licznik - 1);
      //          String s = gson.toJson(kwis);
                String s= gson.toJson(quiz);

                return ResponseEntity.ok()
                        .headers(responseHeaders)
                        .body(s);
            }
            else {
                return new ResponseEntity(HttpStatus.BAD_REQUEST);
            }
        }
        //-----------------------------------------------------------------------
        @PostMapping(path="/api/quizzes/{id}/solve",consumes = "application/json")
        public Object solveQuiz(@PathVariable("id") int id, @RequestBody JsonNode answer, Model model) {
            //return quiz;
            System.out.println(answer);
            Odpowiedz odpowiedz = new Odpowiedz();
            List<Integer> prawidloweOdpowiedzi=null;
            List<Integer> prawidloweOdpowiedzi2=new ArrayList<>();
            Quiz pobrany=quizRepository.findById(id);
            try {
                //prawidloweOdpowiedzi = qwizy.get(id - 1).getAnswer();
                prawidloweOdpowiedzi=pobrany.getAnswer();
                for(int k:prawidloweOdpowiedzi){
                    prawidloweOdpowiedzi2.add(k);
                }
                prawidloweOdpowiedzi=prawidloweOdpowiedzi2;
            }catch (IndexOutOfBoundsException e){
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }


            JsonNode answers = answer.get("answer");
            List<Integer> odpowiedzi= new ArrayList<>();
            boolean czyOk=false;
            if(answers.isArray()){
                ArrayNode arrayNode = (ArrayNode) answers;
                for (int i = 0; i < arrayNode.size(); i++) {
                    odpowiedzi.add(arrayNode.get(i).intValue());
                }



            }

            czyOk=prawidloweOdpowiedzi.equals(odpowiedzi);

            if(czyOk){
                odpowiedz.setSuccess(true);
                odpowiedz.setFeedback("Congratulations, you're right!");
            }
            else {
                odpowiedz.setSuccess(false);
                odpowiedz.setFeedback("Wrong answer! Please, try again.");

            }

            return odpowiedz;
        }
        //-----------------------------------------------------------------------
        @GetMapping("/api/quizzes")
        public List<Quiz> getQuizybyId() {

            System.out.println("wszystkie kwizy");
            List<Quiz> listaQuizow = quizRepository.findAll();
            return listaQuizow;
            //return qwizy;
        }
        //-----------------------------------------------------------------------
        @GetMapping("/api/quizzes/{id}")
        public Object getQuizybyId(@PathVariable("id") int id) {
            Quiz kwis = null;
            try {
                //kwis = qwizy.get(id - 1);
                kwis=quizRepository.findById(id);
                System.out.println(id + " pobrano kwis" + kwis);
            }catch (IndexOutOfBoundsException e){
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }catch (IllegalArgumentException e){
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
           if (kwis!=null)
            return kwis;
           else
               return new ResponseEntity(HttpStatus.NOT_FOUND);

        }
        //-----------------------------------------------------------------------


    }
  learner_created: true
- name: src/engine/entity/Quiz.java
  visible: true
  text: |
    package engine.entity;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.hibernate.validator.constraints.Length;


    import javax.persistence.*;
    import java.util.List;

    @Entity
    public class Quiz {

        @Id
        @GeneratedValue
        int id;

        @Column
        @Length(min=1)
        String title;

        @Column
         @Length(min=1)
        String text;

        @ElementCollection
        List<String> options;

       @JsonIgnore
       @ElementCollection
        //private transient List<Integer> answer;
       private List<Integer> answer;

        public Quiz() {
        }



        public Quiz(String title, String text, List<String> options, List<Integer> answer) {
            this.title = title;
            this.text = text;
            this.options = options;
            this.answer = answer;
        }



        public String getTitle() {
            return title;
        }

        public void setTitle(String title) {
            this.title = title;
        }

        public String getText() {
            return text;
        }

        public void setText(String text) {
            this.text = text;
        }

        public List<String> getOptions() {
            return options;
        }

        public void setOptions(List<String> options) {
            this.options = options;
        }

        public List<Integer> getAnswer() {
            return answer;
        }

        public void setAnswer(List<Integer> answer) {
            this.answer = answer;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }


        @Override
        public String toString() {
            return "Quiz{" +
                    "id=" + id +
                    ", title='" + title + '\'' +
                    ", text='" + text + '\'' +
                    ", options=" + options +
                    ", answer=" + answer +
                    '}';
        }


    }
  learner_created: true
- name: src/engine/controller/StageThreeController.java
  visible: true
  text: |
    package engine.controller;

    //@RestController
    public class StageThreeController {
     /*   //-----------------------------------------------------------------------
        private Quiz quiz;
        private List<String> opcje;
        //private List<Boolean> opcjeOdpowiedzi;
        Quiz odpowiedz;
        List<Quiz> qwizy;
        int licznik;
        //-----------------------------------------------------------------------

        public StageThreeController() {
            qwizy=new ArrayList<>();
        }


        //-----------------------------------------------------------------------
        @PostMapping(path="/api/quizzes",  consumes = "application/json" )
        public ResponseEntity<String> insertKwiz(@RequestBody com.fasterxml.jackson.databind.JsonNode inf, Model model) {

            String title = inf.get("title").asText();
            String text = inf.get("text").asText();
            JsonNode options = null;
            options = inf.get("options");

            List<String> opcje= new ArrayList<>();
           if(options!=null) {
               if (options.isArray()) {
                   ArrayNode arrayNode = (ArrayNode) options;
                   for (int i = 0; i < arrayNode.size(); i++) {
                       opcje.add(arrayNode.get(i).asText());
                   }
               }
           }else {
               return new ResponseEntity(HttpStatus.BAD_REQUEST);
           }

            //int answer = Integer.parseInt(inf.get("answer").asText());

            List<Integer> odpowiedzi= new ArrayList<>();
            JsonNode answers=null;
             answers = inf.get("answer");
            if(answers!=null) {
                if (answers.isArray()) {
                    ArrayNode arrayNode = (ArrayNode) answers;
                    for (int i = 0; i < arrayNode.size(); i++) {
                        odpowiedzi.add(arrayNode.get(i).intValue());
                    }
                }
            }



            boolean czyOk=false;
            if(title.length()>0 && text.length()>0&& opcje.size()>1) czyOk=true;

            if(czyOk) {
                licznik++;
    //            quiz = new Quiz(licznik, title, text, opcje, answer);
                quiz = new Quiz(licznik, title, text, opcje, odpowiedzi);


                System.out.println("wprowadzono " + quiz);
                qwizy.add(quiz);

                // return null;
                HttpHeaders responseHeaders = new HttpHeaders();
                responseHeaders.set("Content-Type", "application/json");

                Gson gson = new Gson();
                //gson.


                Quiz kwis = qwizy.get(licznik - 1);
                String s = gson.toJson(kwis);

                return ResponseEntity.ok()
                        .headers(responseHeaders)
                        .body(s);
            }
            else {
                return new ResponseEntity(HttpStatus.BAD_REQUEST);
            }
        }
        //-----------------------------------------------------------------------
        @PostMapping(path="/api/quizzes/{id}/solve",consumes = "application/json")
        public Object solveQuiz(@PathVariable("id") int id, @RequestBody JsonNode answer, Model model) {
            //return quiz;
            System.out.println(answer);
            Odpowiedz odpowiedz = new Odpowiedz();
            List<Integer> prawidloweOdpowiedzi=null;
            try {
                prawidloweOdpowiedzi = qwizy.get(id - 1).getAnswer();
            }catch (IndexOutOfBoundsException e){
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }


            JsonNode answers = answer.get("answer");
            List<Integer> odpowiedzi= new ArrayList<>();
            boolean czyOk=false;
            if(answers.isArray()){
                ArrayNode arrayNode = (ArrayNode) answers;
                for (int i = 0; i < arrayNode.size(); i++) {
                    odpowiedzi.add(arrayNode.get(i).intValue());
                }



            }

            czyOk=prawidloweOdpowiedzi.equals(odpowiedzi);

            if(czyOk){
                odpowiedz.setSuccess(true);
                odpowiedz.setFeedback("Congratulations, you're right!");
            }
            else {
                odpowiedz.setSuccess(false);
                odpowiedz.setFeedback("Wrong answer! Please, try again.");

            }

            return odpowiedz;
        }
        //-----------------------------------------------------------------------
        @GetMapping("/api/quizzes")
        public List<Quiz> getQuizybyId() {

            System.out.println("wszystkie kwizy");

            return qwizy;
        }
        //-----------------------------------------------------------------------
        @GetMapping("/api/quizzes/{id}")
        public Object getQuizybyId(@PathVariable("id") int id) {
            Quiz kwis = null;
            try {
                kwis = qwizy.get(id - 1);
                System.out.println(id + " pobrano kwis" + kwis);
            }catch (IndexOutOfBoundsException e){
                return new ResponseEntity(HttpStatus.NOT_FOUND);
            }
            return kwis;

        }
     */   //-----------------------------------------------------------------------
    }
  learner_created: true
- name: src/engine/repository/QuizRepository.java
  visible: true
  text: |
    package engine.repository;

    import engine.entity.Quiz;
    import org.springframework.data.repository.CrudRepository;

    import java.util.List;

    public interface QuizRepository extends CrudRepository<Quiz,Integer> {

        List<Quiz> findAll();
        Quiz findById(int id);


    }
  learner_created: true
- name: src/engine/controller/StageFiveController.java
  visible: true
  learner_created: true
- name: src/engine/config/SecurityConfig.java
  visible: true
  learner_created: true
- name: src/engine/entity/UserDto.java
  visible: true
  learner_created: true
- name: src/engine/service/UserService.java
  visible: true
  learner_created: true
- name: src/engine/service/UserServiceImpl.java
  visible: true
  learner_created: true
- name: src/engine/entity/User.java
  visible: true
  learner_created: true
- name: src/engine/entity/Role.java
  visible: true
  learner_created: true
- name: src/engine/dao/RoleDao.java
  visible: true
  learner_created: true
- name: src/engine/dao/RoleDaoImpl.java
  visible: true
  learner_created: true
- name: src/engine/dao/UserDao.java
  visible: true
  learner_created: true
- name: src/engine/dao/UserDaoImpl.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/91/stages/508/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 23 May 2021 13:05:21 UTC
record: 5
